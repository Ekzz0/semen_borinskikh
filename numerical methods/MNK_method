import numpy as np
# Метод наименьших квадратов
nodes = [
    np.array([0.,  0.]),
    np.array([0, 2.79999995]),
    np.array([3, 3.86666656]),
    np.array([-3, 1.73333335]),
    np.array([6,  0]),
    np.array([9, 6]),
    np.array([12, 4.9333334]),
    np.array([15., 3.86666656]),
    np.array([18, 0]),
    np.array([12, 0]),
    np.array([6, 4.9333334]),
    np.array([18, 2.79999995]),
    np.array([21., 1.73333335]) ]

elements = [
    (0, 1),
    (2, 1),
    (2, 0),
    (3, 0),
    (1, 3),
    (4, 2),
    (5, 4),
    (5, 6),
    (6, 7),
    (7, 8),
    (9, 8),
    (4, 9),
    (0, 4),
    (10, 2),
    (4, 10),
    (9, 5),
    (9, 7),
    (7, 11),
    (8, 11),
    (9, 6),
    (12, 8),
    (11, 12),
    (5, 10)   ]

bcs = [3, 12] # Номера узлов, которые закреплены

forces = [(5,-1e3), (6,-1e3), (7,-1e3), (10,-1e3), (11,-1e3), (2,-1e3), (1,-1e3)] # Номера узлов, на которые приложена нагрузка

E = 2e11
A = 1e-4


def calc_stiffness(element):
    node1 = nodes[element[0]]
    node2 = nodes[element[1]]

    l = np.linalg.norm(node1 - node2)

    l12 = (node2[0] - node1[0]) / l
    m12 = (node2[1] - node1[1]) / l

    tr = np.array([[l12, m12, 0, 0], [0, 0, l12, m12]])
    k_local = E * A / l * np.array([[1, -1], [-1, 1]])

    return np.matmul(np.matmul(tr.T, k_local.T), tr)


def calc_global_stiffnes():
    k = np.zeros((2 * len(nodes), 2 * len(nodes)))
    for el in elements:
        stiffness = calc_stiffness(el)
        for i in range(2):
            for j in range(2):
                k[2 * el[i], 2 * el[j]] += stiffness[2 * i, 2 * j]
                k[2 * el[i], 2 * el[j] + 1] += stiffness[2 * i, 2 * j + 1]
                k[2 * el[i] + 1, 2 * el[j]] += stiffness[2 * i + 1, 2 * j]
                k[2 * el[i] + 1, 2 * el[j] + 1] += stiffness[2 * i + 1, 2 * j + 1]

    return k


def calc_forces():
    f = np.zeros(2 * len(nodes))

    for force in forces:
        f[2 * force[0] + 1] = force[1]

    return f


def calc_bcs(stiffness, forces):
    mod_stiffness = np.copy(stiffness)
    mod_forces = np.copy(forces)
    for bc in bcs:
        mod_stiffness[2 * bc, :] = 0
        mod_stiffness[2 * bc + 1, :] = 0
        mod_stiffness[2 * bc, 2 * bc] = 1
        mod_stiffness[2 * bc + 1, 2 * bc + 1] = 1
        mod_forces[2 * bc] = 0
        mod_forces[2 * bc + 1] = 0

    return mod_stiffness, mod_forces


stiffness = calc_global_stiffnes()
forces = calc_forces()

eq_stiffness, eq_forces = calc_bcs(stiffness, forces)

u = np.linalg.solve(eq_stiffness, eq_forces)

for i in range(0, len(nodes)):
    print("{:.8E} {:.8E}".format(u[2 * i], u[2 * i + 1]))

for el in elements:
    node1 = nodes[el[0]]
    node2 = nodes[el[1]]

    u1 = np.array([u[2 * el[0]], u[2 * el[0] + 1]])
    u2 = np.array([u[2 * el[1]], u[2 * el[1] + 1]])

    l = np.linalg.norm(node1 - node2)

    force = E * A * (np.dot(node1 + u1 - node2 - u2, node1 - node2) / l / l - 1)

    print("{: .8E}".format(force))
