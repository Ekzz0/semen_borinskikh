#include <iostream>
#include <string>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
using namespace std;

int main() {
    string path = "D:\\C++\\Task1\\1.txt";
    ifstream file_in;
    file_in.open(path);
    if (!file_in.is_open()){
        cout << "Error " << endl;
    }
    else{
        cout << "success" << endl;
        string num ;
        int size = 22;
        int *num_m = new int[size];
        int i = 0;
        while (!file_in.eof())
        {
            num = "";
            getline(file_in, num);
            //cout <<  num << endl;
            // проверка нулевого символа на минус
            if (num[0] == '-')
            {
                num_m[i] = (-1)*(int)(num[1] - '0'); // занесение x
            }
            else
            {
                num_m[i] = (int)(num[0] - '0'); // занесение x
            }
            // проверка 2го символа символа на минус
            if (num[num.size() - 2] == '-')
            {
                num_m[i+1] = (-1)*(int)(num[num.size() - 1] - '0'); // занесение y
            }
            else
            {
                num_m[i+1] = (int)(num[num.size() - 1]- '0'); // занесение y
            }
            i=i+2;
        }
        for (int j = 0; j <i; j=j+2)
        {
            cout <<  *(num_m+j) <<" "<< *(num_m+j+1) << endl;
        }
        int xn = *(num_m);
        int yn = *(num_m+1);
        int size_dl = 11;
        int *D_LEFT= new int[size_dl];
        int size_dr = 11;
        int *D_RIGHT= new int[size_dr];
        int k_left = 0;
        int k_right = 0;
        int size_dr_num = 11;
        int *dr_num= new int[size_dr_num];
        int size_dl_num = 11;
        int *dl_num= new int[size_dl_num];

        for (int j = 2; j < i; j = j +2 )
        {
            if ( xn*(*(num_m+j+1)) - yn*(*(num_m+j)) > 0.0 ) // слева
            {
                *(D_LEFT + k_left) = abs(xn*(*(num_m+j+1)) - yn*(*(num_m+j)))/sqrt(xn^2+yn^2);
                *(dl_num + k_left) = *(num_m+j);
                *(dl_num + k_left+ 1) = *(num_m+j+1);
                k_left=k_left+2;
            }
            else if (xn*(*(num_m+j+1)) - yn*(*(num_m+j)) == 0.0)
            {
                *(D_RIGHT + k_right) = abs(xn*(*(num_m+j+1)) - yn*(*(num_m+j)))/sqrt(xn^2+yn^2);
                *(dr_num + k_right) = *(num_m+j);
                *(dr_num + k_right + 1) = *(num_m+j+1);
                k_right=k_right+2;
            }
           else // справа
            {
                *(D_RIGHT + k_right) = abs(xn*(*(num_m+j+1)) - yn*(*(num_m+j)))/sqrt(xn^2+yn^2);
                *(dr_num + k_right) = *(num_m+j);
                *(dr_num + k_right+1) = *(num_m+j+1);
                k_right=k_right+2;
            }

        }
        //Найдем максимальные элементы
        int max_r; // Для правого
        int j_right_max;
        for (int j = 0; j < k_right; j++)
        {
            if (*(D_RIGHT + j) > max_r) {
                max_r = *(D_RIGHT +j);
                j_right_max = j;
            }
        }
        int max_l; // Для левого
        int j_left_max;
        for (int j = 0; j < k_left; j++)
        {
            if (*(D_LEFT + j) > max_l) {
                max_l = *(D_LEFT +j);
                j_left_max = j;
            }
        }
        cout << "Leftmost: " << *(dl_num + j_left_max) << " " << *(dl_num + j_left_max +1 ) << endl;
        cout << "Rightmost: " << *(dr_num + j_right_max) << " " << *(dr_num + j_right_max + 1 )  << endl;

        delete [] num_m;
        delete [] D_LEFT;
        delete [] D_RIGHT;
        delete [] dl_num;
        delete [] dr_num;
    }
    file_in.close();
    return 0;
}
