#%% md
Кошки и собаки
#%%
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras.layers import Dense, Flatten, Dropout, BatchNormalization,Conv2D, MaxPooling2D

from tensorflow.keras.datasets import cifar10  # библиотека базы выборок cifar10  
#%%
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

for i in range(len(y_train)):
    if y_train[i][0] != 5 and y_train[i][0] != 3:
        y_train[i] = 0 # ничего
    if y_train[i][0] == 5:  
        y_train[i] = 1 # собаки
    if y_train[i][0] == 3:  
        y_train[i] = 2 # кошки
    
for i in range(len(y_test)):
    if y_test[i][0] != 5 and y_test[i][0] != 3:
        y_test[i] = 0
    if y_test[i][0] == 5: 
        y_test[i] = 1
    if y_test[i][0] == 3:  
        y_test[i] = 2

# стандартизация входных данных
x_train = x_train / 255
x_test = x_test / 255

y_train_cat = keras.utils.to_categorical(y_train, 3)
y_test_cat = keras.utils.to_categorical(y_test, 3)

#%% md
Таким образом получаем 3 выхода: 2 - кошка, 1 - собака, 0 - не кошка и не собака
#%%
#print(ds_info)

plt.figure(figsize=(10,5))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(x_train[i], cmap=plt.cm.binary)

plt.show()
#fig = tfds.show_examples(ds_train, ds_info, rows = 4, cols = 4)
#%% md
This is a dataset of 50,000 32x32 color training images and 10,000 test images, labeled over 10 categories
#%%
model = keras.Sequential([
    Flatten(input_shape=(32, 32, 3)), # входной слой
    Dense(128, activation='relu'), # скрытый слой
    Dropout(0.5),
    #BatchNormalization(),
    Dense(3, activation='softmax') # выходной слой
])

#print(model.summary())      # вывод структуры НС в консоль
#%%
mySGD = keras.optimizers.SGD(learning_rate=0.1, momentum=0.0, nesterov=True)

model.compile(optimizer=mySGD,
             loss='categorical_crossentropy', # т.к больше чем 2 класса
             metrics=['accuracy'])

history = model.fit(x_train, y_train_cat, batch_size=500, epochs=5, validation_split=0.2)

plt.plot(history.history['loss']) # 2й history - словарь, loss - критерий качества
#, вычисленный для каждой эпохи
plt.plot(history.history['val_loss'])

plt.grid(True)
plt.show()
#%%
model.evaluate(x_test, y_test_cat)
#%%
# Распознавание всей тестовой выборки
pred = model.predict(x_test) # 10000 векторов из 10 значений
pred = np.argmax(pred, axis=1) # 10000 значений, которые являются числом

new_y = []
for i in range(len(y_test)):
    new_y.append(int(y_test[i][0]))
    
#print(new_y)  

print(pred.shape)

print(pred[:20]) # первые 20 предсказанных чисел
print(new_y[:20]) # реальные первые 20 чисел
#%%
# Выделение неверных вариантов
mask = pred == new_y # формируем маску. Где сравненные значения равны -> True
# если не равны -> False
print(mask[:10]) #

x_false = x_test[~mask] # только те, что со значением false
p_false = pred[~mask]

print(x_false.shape)
#%%
# Вывод первых 10 неверных результатов
class_name = ["Ничего","Собака","Кошка"]
plt.figure(figsize=(10,5))
for i in range(10):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    print("Заключение сети: " + class_name[p_false[i]])
    plt.imshow(x_false[i], cmap=plt.cm.binary)

plt.show()
#%%
